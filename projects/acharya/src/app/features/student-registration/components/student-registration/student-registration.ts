import { Component, inject, signal, computed } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { Router, RouterLink } from '@angular/router';
import { CommonModule } from '@angular/common';
import { Student } from '../../models/student';
import { StudentStore } from '../../services/student-store';

@Component({
  selector: 'app-student-registration',
  imports: [CommonModule, ReactiveFormsModule, RouterLink],
  templateUrl: './student-registration.html',
  styleUrl: './student-registration.scss'
})
export class StudentRegistration {
  private readonly fb = inject(FormBuilder);
  private readonly router = inject(Router);
  private readonly studentStore = inject(StudentStore);

  // Form
  readonly registrationForm: FormGroup = this.fb.group({
    firstName: ['', [Validators.required, Validators.minLength(2)]],
    lastName: ['', [Validators.required, Validators.minLength(2)]],
    email: ['', [Validators.required, Validators.email]],
    dateOfBirth: ['', Validators.required],
    phoneNumber: ['', [Validators.required, Validators.pattern(/^[\+]?[1-9][\d]{0,15}$/)]],
    address: ['', Validators.required],
    city: ['', Validators.required],
    state: ['', Validators.required],
    zipCode: ['', [Validators.required, Validators.pattern(/^\d{5}(-\d{4})?$/)]],
    grade: ['', Validators.required],
    schoolName: ['', Validators.required],
    parentName: ['', Validators.required],
    parentPhone: ['', [Validators.required, Validators.pattern(/^[\+]?[1-9][\d]{0,15}$/)]],
    parentEmail: ['', [Validators.required, Validators.email]],
    emergencyContact: ['', Validators.required],
    emergencyPhone: ['', [Validators.required, Validators.pattern(/^[\+]?[1-9][\d]{0,15}$/)]],
    medicalConditions: [''],
    allergies: ['']
  });

  // State signals
  private readonly _isSubmitting = signal(false);
  private readonly _formErrors = signal<string[]>([]);

  // Computed signals
  readonly isSubmitting = this._isSubmitting.asReadonly();
  readonly formErrors = this._formErrors.asReadonly();
  readonly loading = this.studentStore.loading;

  // Grade options
  readonly gradeOptions = [
    'Pre-K', 'Kindergarten', '1st Grade', '2nd Grade', '3rd Grade',
    '4th Grade', '5th Grade', '6th Grade', '7th Grade', '8th Grade',
    '9th Grade', '10th Grade', '11th Grade', '12th Grade'
  ];

  // State options
  readonly stateOptions = [
    'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA',
    'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD',
    'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ',
    'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC',
    'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'
  ];

  // Form validation helpers
  readonly firstNameErrors = computed(() => {
    const control = this.registrationForm.get('firstName');
    if (control?.touched && control?.errors) {
      if (control.errors['required']) return 'First name is required';
      if (control.errors['minlength']) return 'First name must be at least 2 characters';
    }
    return '';
  });

  readonly lastNameErrors = computed(() => {
    const control = this.registrationForm.get('lastName');
    if (control?.touched && control?.errors) {
      if (control.errors['required']) return 'Last name is required';
      if (control.errors['minlength']) return 'Last name must be at least 2 characters';
    }
    return '';
  });

  readonly emailErrors = computed(() => {
    const control = this.registrationForm.get('email');
    if (control?.touched && control?.errors) {
      if (control.errors['required']) return 'Email is required';
      if (control.errors['email']) return 'Please enter a valid email address';
    }
    return '';
  });

  readonly phoneErrors = computed(() => {
    const control = this.registrationForm.get('phoneNumber');
    if (control?.touched && control?.errors) {
      if (control.errors['required']) return 'Phone number is required';
      if (control.errors['pattern']) return 'Please enter a valid phone number';
    }
    return '';
  });

  readonly zipCodeErrors = computed(() => {
    const control = this.registrationForm.get('zipCode');
    if (control?.touched && control?.errors) {
      if (control.errors['required']) return 'ZIP code is required';
      if (control.errors['pattern']) return 'Please enter a valid ZIP code';
    }
    return '';
  });

  async onSubmit(): Promise<void> {
    if (this.registrationForm.invalid) {
      this.markFormGroupTouched();
      return;
    }

    this._isSubmitting.set(true);
    this._formErrors.set([]);

    try {
      const studentData = this.registrationForm.value;
      const student = new Student(
        '', // id will be generated by backend
        studentData.firstName,
        studentData.lastName,
        studentData.email,
        studentData.dateOfBirth,
        studentData.phoneNumber,
        studentData.address,
        studentData.city,
        studentData.state,
        studentData.zipCode,
        studentData.grade,
        studentData.schoolName,
        studentData.parentName,
        studentData.parentPhone,
        studentData.parentEmail,
        studentData.emergencyContact,
        studentData.emergencyPhone,
        studentData.medicalConditions,
        studentData.allergies
      );

      await this.studentStore.createStudent(student);
      
      // Redirect to success page or student list
      this.router.navigate(['/students']);
    } catch (error) {
      this._formErrors.set([error instanceof Error ? error.message : 'Registration failed']);
    } finally {
      this._isSubmitting.set(false);
    }
  }

  private markFormGroupTouched(): void {
    Object.keys(this.registrationForm.controls).forEach(key => {
      const control = this.registrationForm.get(key);
      control?.markAsTouched();
    });
  }

  resetForm(): void {
    this.registrationForm.reset();
    this._formErrors.set([]);
  }
}
